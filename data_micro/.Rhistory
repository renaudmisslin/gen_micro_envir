colnames(area_tot)[n_cls+7] <- 'ndbi_olico'
area_tot[1,1]
area_tot[1,2]
area_tot$bati_dense[1]
View(data)
View(shp_base)
View(shp_admin)
plot(shp_admin)
library(raster)
plot(raster(matrix(c=(0,1,0,1,0,1))))
plot(raster(matrix(0,1,0,1,0,1)))
.matrix
?matrix
as.matrix(c=(0,1,0,1)
plot(shp_admin, col="red")
plot(shp_admin[1])
area_tot <- merge(shp_admin@data, area_tot, by = 'id')
# Assemblage des classes de bâti lâches
area_tot$bati_lache_moyen <- area_tot$bati_lache + area_tot$bati_moyen
write.table(coef, fichier_coef, sep=";")
############################################################################################################################################
# Calcul de la régression
############################################################################################################################################
# Calcul de la régression sans intercept
reg <- lm(formula = No_HH ~ 0 + bati_dense + bati_lache_moyen + ndbi_olico, data = area_tot)
summary(reg)
reg <- lm(formula = No_HH ~ bati_dense + bati_lache_moyen + ndbi_olico, data = area_tot)
summary(reg)
?fuzzylm
coef <- coef(summary(reg))
fichier_coef <- paste(dossier_general, "/coef.txt", sep="")
write.table(coef, fichier_coef, sep=";")
coef <- read.table(fichier_coef, sep=";")
coef[5] <- row.names(coef[1])
# Estimation de la population de chaque entité administrative
area_tot["pop_est"] <- 0
for (i in 1:nrow(area_tot)){
area_tot$pop_est[i] <- 0
for (j in 1:nrow(coef)){
cls_en_cours <- coef[j,5]
area_cls <- eval(parse(text=paste('area_tot$',cls_en_cours,'[',i ,']',sep='')))
pop_cls <- area_cls * coef[j,1]
area_tot$pop_est[i] <- pop_cls  + area_tot$pop_est[i]
}
}
# Calcul du ratio
area_tot$ratio_correc <- 0
if (var_exo == 'TOT_P'){
area_tot$ratio_correc <- area_tot$pop_est / area_tot$TOT_P
} else {
area_tot$ratio_correc <- area_tot$pop_est / area_tot$No_HH
}
coef <- coef(summary(reg))
fichier_coef <- paste(dossier_general, "/coef.txt", sep="")
write.table(coef, fichier_coef, sep=";")
coef <- read.table(fichier_coef, sep=";")
coef[5] <- row.names(coef[1])
# Estimation de la population de chaque entité administrative
area_tot["pop_est"] <- 0
for (i in 1:nrow(area_tot)){
area_tot$pop_est[i] <- 0
for (j in 1:nrow(coef)){
cls_en_cours <- coef[j,5]
area_cls <- eval(parse(text=paste('area_tot$',cls_en_cours,'[',i ,']',sep='')))
pop_cls <- area_cls * coef[j,1]
area_tot$pop_est[i] <- pop_cls  + area_tot$pop_est[i]
}
}
# Calcul du ratio
area_tot$ratio_correc <- 0
if (var_exo == 'TOT_P'){
area_tot$ratio_correc <- area_tot$pop_est / area_tot$TOT_P
} else {
area_tot$ratio_correc <- area_tot$pop_est / area_tot$No_HH
}
cls_en_cours
reg <- lm(formula = No_HH ~ 0 + bati_dense + bati_lache_moyen + ndbi_olico, data = area_tot)
summary(reg)
############################################################################################################################################
# Calcul des coefficients de correction à appliquer à chaque entité admin
############################################################################################################################################
# Ecriture puis lecture du fichier contenant les coefficients (sinon on ne peut pas récupérer le nom des classes d'occsol associées)
coef <- coef(summary(reg))
fichier_coef <- paste(dossier_general, "/coef.txt", sep="")
write.table(coef, fichier_coef, sep=";")
coef <- read.table(fichier_coef, sep=";")
coef[5] <- row.names(coef[1])
# Estimation de la population de chaque entité administrative
area_tot["pop_est"] <- 0
for (i in 1:nrow(area_tot)){
area_tot$pop_est[i] <- 0
for (j in 1:nrow(coef)){
cls_en_cours <- coef[j,5]
area_cls <- eval(parse(text=paste('area_tot$',cls_en_cours,'[',i ,']',sep='')))
pop_cls <- area_cls * coef[j,1]
area_tot$pop_est[i] <- pop_cls  + area_tot$pop_est[i]
}
}
# Calcul du ratio
area_tot$ratio_correc <- 0
if (var_exo == 'TOT_P'){
area_tot$ratio_correc <- area_tot$pop_est / area_tot$TOT_P
} else {
area_tot$ratio_correc <- area_tot$pop_est / area_tot$No_HH
}
View(area_tot)
############################################################################################################################################
# Calcul du nombre d'habitants par pixel
############################################################################################################################################
shp_base$popco <- as.vector(NA)
# Récupération des coef (à part occsol)
noms_indices <- rownames(coef)[!grepl("bati", rownames(coef))]
coef_indices <- coef[noms_indices,]
coef_b10 <- 0
coef_b11 <- 0
coef_b1_pca1011 <- 0
coef_b2_pca1011 <- 0
coef_baem <- 0
coef_ndbi_oli <- 0
coef_ndvi <- 0
coef_ndbi_olico <- 0
for (i in 1:nrow(coef_indices)){
eval(parse(text=paste('coef_', coef_indices$V5[i] , ' <- ', coef_indices[i,1] , sep='')))
}
horaire_debut <- Sys.time()
for (i in 1:nrow(shp_base@data)){#nrow(shp_base)
cls_occsol <- gsub("-","_",shp_base@data$Class_Name[i])
if (cls_occsol == 'bati_dense' | cls_occsol == 'bati_lache'  | cls_occsol == 'bati_moyen'){
# Récupération des données associées au pixel
b10 <- shp_base@data$b10[i]
b11 <- shp_base@data$b11[i]
b1_pca1011 <- shp_base@data$b1_pca1011[i]
b2_pca1011 <- shp_base@data$b2_pca1011[i]
baem <- shp_base@data$baem[i]
ndbi_oli <- shp_base@data$ndbi_oli[i]
ndvi <- shp_base@data$ndvi[i]
ndbi_olico <- shp_base@data$ndbi_olico[i]
# Récupération du ratio du ward auquel appartient le patch
tbl <- which(shp_base@data$bkk_kwaeng[i] == area_tot$id)
ratio_correc <- area_tot$ratio_correc[tbl]
# Récupération du coefficient de la catégorie occsol en cours
if (cls_occsol == 'bati_lache'  | cls_occsol == 'bati_moyen' ){
cls_occsol <- 'bati_lache_moyen'
}
ligne_coef <- which(as.character(cls_occsol) == as.character(coef$V5))
coef_occsol <- coef[ligne_coef,1]
# Estimation de la population du patch
pop_patch_est <- coef_occsol*pxl_size + coef_b10*b10 + coef_b11*b11 + coef_b1_pca1011*b1_pca1011 + coef_b1_pca1011*b1_pca1011 + coef_baem*baem + coef_ndbi_oli*ndbi_oli + coef_ndvi*ndvi + coef_ndbi_olico*ndbi_olico
pop_patch_est <- pop_patch_est / ratio_correc
} else {
pop_patch_est <- 0
}
if (var_exo == 'TOT_P'){
shp_base@data$popest[i] <- pop_patch_est
}
else{
shp_base@data$menest[i] <- pop_patch_est
}
if (i%%50000 == 0){
print(i)
}
}
shp_admin$ratio_correc <- as.vector(NA)
# Couplage des wards
for (i in 1:nrow(shp_admin)){
tbl <- which(shp_admin$id[i] == area_tot$id)
shp_admin$ratio_correc[i] <- area_tot$ratio_correc[tbl]
}
library(RColorBrewer)
library(classInt)
# Variables à définir
nb_cls <- 6
# Définition de la palette de couleurs
pal_ratio  <-  rev(brewer.pal(n  =  nb_cls,  name  =  "RdBu"))
# Calcul des intervals des classes
ratio_cls_jenks <- classIntervals(var = shp_admin@data$ratio_correc, n = nb_cls, style = "jenks")
brks_ratio_cls_jenks <- ratio_cls_jenks$brks
shp_admin@data$ratio_jenks  <-  as.character(cut(shp_admin@data$ratio_correc,
breaks  =  brks_ratio_cls_jenks,
labels  =  pal_ratio,
include.lowest  =  TRUE,
right  =  FALSE))
vLegendBoxJ  <-  as.character(levels(cut(shp_admin@data$ratio_correc,
breaks  =  brks_ratio_cls_jenks,
include.lowest  =  TRUE,
right  =  FALSE)))
plot(shp_admin,
col  =  shp_admin@data$ratio_jenks,
border  =  "white")
legend("bottomright",
legend  =  vLegendBoxJ,
bty  =  "n",
fill  =  pal_ratio,
cex  =  0.6,
title  =  "Ratio nombre de ménages estimé / nombre de ménages réels")
title(main  =  "Ratio nombre de ménages estimé / nombre de ménages réels")
reg <- lm(formula = No_HH ~ 0 + bati_dense + bati_lache_moyen + ndbi_olico + ndvi, data = area_tot)
summary(reg)
sum(area_tot$TOT_P)
area_tot$ratio_pop_tot <- area_tot$TOT_P / sum(area_tot$TOT_P)
reg <- lm(formula = TOT_P ~ 0 + bati_dense + bati_lache_moyen + ndbi_olico + ratio_pop_tot, data = area_tot)
summary(reg)
reg <- lm(formula = TOT_P ~ 0 + bati_dense + bati_lache_moyen + ndbi_olico + surface, data = area_tot)
summary(reg)
area_tot$densite <- area_tot$TOT_P / area_tot$surface
reg <- lm(formula = TOT_P ~ 0 + bati_dense + bati_lache_moyen + ndbi_olico + densite, data = area_tot)
summary(reg)
reg <- lm(formula = TOT_P ~ 0 + bati_dense + bati_lache_moyen + ndbi_olico, data = area_tot)
summary(reg)
coef <- coef(summary(reg))
fichier_coef <- paste(dossier_general, "/coef.txt", sep="")
write.table(coef, fichier_coef, sep=";")
coef <- read.table(fichier_coef, sep=";")
coef[5] <- row.names(coef[1])
# Estimation de la population de chaque entité administrative
area_tot["pop_est"] <- 0
for (i in 1:nrow(area_tot)){
area_tot$pop_est[i] <- 0
for (j in 1:nrow(coef)){
cls_en_cours <- coef[j,5]
area_cls <- eval(parse(text=paste('area_tot$',cls_en_cours,'[',i ,']',sep='')))
pop_cls <- area_cls * coef[j,1]
area_tot$pop_est[i] <- pop_cls  + area_tot$pop_est[i]
}
}
# Calcul du ratio
area_tot$ratio_correc <- 0
if (var_exo == 'TOT_P'){
area_tot$ratio_correc <- area_tot$pop_est / area_tot$TOT_P
} else {
area_tot$ratio_correc <- area_tot$pop_est / area_tot$No_HH
}
shp_admin$ratio_correc <- as.vector(NA)
# Couplage des wards
for (i in 1:nrow(shp_admin)){
tbl <- which(shp_admin$id[i] == area_tot$id)
shp_admin$ratio_correc[i] <- area_tot$ratio_correc[tbl]
}
library(RColorBrewer)
library(classInt)
# Variables à définir
nb_cls <- 6
# Définition de la palette de couleurs
pal_ratio  <-  rev(brewer.pal(n  =  nb_cls,  name  =  "RdBu"))
# Calcul des intervals des classes
ratio_cls_jenks <- classIntervals(var = shp_admin@data$ratio_correc, n = nb_cls, style = "jenks")
brks_ratio_cls_jenks <- ratio_cls_jenks$brks
shp_admin@data$ratio_jenks  <-  as.character(cut(shp_admin@data$ratio_correc,
breaks  =  brks_ratio_cls_jenks,
labels  =  pal_ratio,
include.lowest  =  TRUE,
right  =  FALSE))
vLegendBoxJ  <-  as.character(levels(cut(shp_admin@data$ratio_correc,
breaks  =  brks_ratio_cls_jenks,
include.lowest  =  TRUE,
right  =  FALSE)))
plot(shp_admin,
col  =  shp_admin@data$ratio_jenks,
border  =  "white")
legend("bottomright",
legend  =  vLegendBoxJ,
bty  =  "n",
fill  =  pal_ratio,
cex  =  0.6,
title  =  "Ratio nombre de ménages estimé / nombre de ménages réels")
title(main  =  "Ratio nombre de ménages estimé / nombre de ménages réels")
summary(area_tot$ratio_correc)
plot(area_tot$ratio_correc, area_tot$bati_dense)
plot(area_tot$ratio_correc, area_tot$bati_dense, pch=20)
plot(area_tot$TOT_P, area_tot$bati_dense, pch=20)
plot(area_tot$TOT_P, area_tot$ndvi, pch=20)
plot(area_tot$TOT_P, area_tot$bati_lache_moyen, pch=20)
plot(area_tot$TOT_P, area_tot$ndbi_olico, pch=20)
reg <- lm(formula = TOT_P ~ 0 + bati_dense, data = area_tot)
summary(reg)
reg <- lm(formula = TOT_P ~ 0 + bati_dense + densite, data = area_tot)
summary(reg)
plot(area_tot$TOT_P, area_tot$densite, pch=20)
?lm
reg <- lm(formula = TOT_P ~ 0 + bati_dense + temp_moy, data = area_tot)
summary(reg)
reg <- lm(formula = TOT_P ~ 0 + bati_dense + bati_lache_moyen + temp_moy, data = area_tot)
summary(reg)
reg <- lm(formula = TOT_P ~ 0 + bati_dense + bati_lache_moyen + temp_moy + ndbi_olico, data = area_tot)
summary(reg)
baem
pop_patch_est
ratio_correc
732/357603
z
732 /357 603
732 /357603
6048 /2396940
409/199747
160*0.02
89*0.02
26141/38223
16266/29000
365*27
365*27
2800+1750
4550 * 4550
7*30
210*240
2.5*2.5
8*6
2370*2520
30*30*52000
16+16
42*50*50
105000*42
rsq(1600)
sqrt(1600)
library(foreign)
?read.dta
read.dta("C:\Users\renaud\Desktop\rp12indcvi5.dta")
read.dta("C:/Users/renaud/Desktop/rp12indcvi5.dta")
setwd("rp12indcvi5.dta")")
setwd("C:/Users/renaud/Desktop/")
df <- read.dta("rp12indcvi5.dta")
df <- read.dta("C:/Users/renaud/Desktop/rp12indcvi5.dta")
View(df)
?write.csv
write.table(df, file="rp12indcvi5")
write.table(df, file="rp12indcvi5.csv")
df <- read.dta("C:/Users/renaud/Desktop/rp12indcvi4.dta")
write.table(df, file="rp12indcvi4")
df <- read.dta("C:/Users/renaud/Desktop/rp12indcvi3.dta")
write.table(df, file="rp12indcvi3.csv")
df <- read.dta("C:/Users/renaud/Desktop/rp12indcvi2.dta")
write.table(df, file="rp12indcvi2.csv")
df <- read.dta("C:/Users/renaud/Desktop/rp12indcvi1.dta")
write.table(df, file="rp12indcvi1.csv")
(0.2-0.3)/(0.3+0.3)
(0.3-0.3)/(0.3+0.3)
(0.0-0.3)/(0.3+0.3)
(-0.3-0.3)/(0.3+0.3)
(0.3-0.3)/(0.3+0.3)
((0.3-0.3)/(0.3+0.3))+1
((-0.3-0.3)/(0.3+0.3))+1
((-0.2-0.3)/(0.3+0.3))+1
((-0.1-0.3)/(0.3+0.3))+1
((-0-0.3)/(0.3+0.3))+1
((0+0.3)/(0.3+0.3))
((0.3+0.3)/(0.3+0.3))
((-0.3+0.3)/(0.3+0.3))
67 + 130 - 67 * (0.5)
67 + (130 - 67) * (0.5)
67 + (130 - 67) * (0.7)
67 + (130 - 67) * (0.8)
67 + (130 - 67) * (0.2)
67 + (130 - 67) * (1)
67 + (130 - 67) * (0)
Temperature <- [10,15,3,36.5]
Altitude <- [100,200,300,400]
Temperature <- [10,15,3,36.5]
Altitude <- ([)100,200,300,400)
Temperature <- [10,15,3,36.5]
Altitude <- (100,200,300,400)
Temperature <- [10,15,3,36.5]
Altitude <- c(100,200,300,400)
Temperature <- c(10,15,3,36.5)
?c
plot(Temperature,Altitude)
Altitude
Altitude[2]
poisson(30)
?poisson
renaud <- read.csv("C:/Users/renaud/Desktop/renaud.csv", header=FALSE)
View(renaud)
renaud <- read.csv("C:/Users/renaud/Desktop/renaud.csv", header=FALSE, skip=1)
View(renaud)
summary(renaud)
renaud[,10]
summary(renaud[,10])
table(renaud[,10])
min(renaud[,10])
max(renaud[,10])
?summary
summary(renaud[,10])[1]
summary(renaud[,3])
table(renaud[,3])
var <- renaud[,10]
summary(var)
table(var)
typeof(var)
var <- double(var)
var <- as.numeric(var)
table(var)
summary(var)
min(var)
apply(var, 5, summary)
apply(var, 2, summary)
summary(var, digits=1)
summary(var, digits=2)
summary(var, digits=3)
summary(var, digits=4)
summary(var, digits=5)
larg <- c(8,13,5,7,12,10,13,8,11)
long <- c(17,13,13,19,16,10,15,15,9)
plot(long,larg)
larg <- c(8,13,5,7,12,10,13,8,9)
long <- c(17,13,13,19,16,10,15,15,11)
plot(long,larg)
long / larg
long * larg
aire <- c(50, 200)
n_men <- c(25,1)
?lm
lm(aire ~ n_men)
206.25 + 1 * -6.25
sqrt(200)
100 / sqrt(200)
(100 / sqrt(200)) * sqrt(200)
sqrt(50)
aire <- c(50, 100, 200)
n_men <- c(25, 15, 1)
lm(aire ~ n_men)
library(raster)
library(rgeos)
library(rgdal)
library(sp)
library(maptools)
library(ggplot2)
# Paramètres
RES_GRID <- 1000
# Working directories et data directories
workspace <- "C:/Users/renaud/Desktop/these/modelisation/validation_gen_envir"
directory_data_modemicro <- "C:/Users/renaud/Desktop/these/modelisation/workspace_gama/gen_micro_envir/results"
directory_data_bma <- "C:/Users/renaud/Desktop/these/analyses_et_traitements/bangkok_juillet-aout-sept_2014/occupation_du_sol/quartiers/bangkhuntien"
directory_input_data_micro <- "C:/Users/renaud/Desktop/these/modelisation/workspace_gama/gen_micro_envir/data_micro"
setwd(directory_input_data_micro )
# Chargement des data_micro
routes_bgt <- readOGR(dsn = directory_input_data_micro, layer = "routes_zone")
dist_raster_zone_bgt <- raster("dist_raster_zone.tif")
extract_ggmap_zone_bgt <- raster("extract_ggmap_zone.tif")
men_zone_bgt <- raster("men_zone.tif")
ndvi_zone_bgt <- raster("ndvi_zone.tif")
pop_zone_bgt <- raster("pop_zone.tif")
plot(extract_ggmap_zone_bgt)
# Chargement des données
shp_bati_gen <- readOGR(dsn = directory_data_modemicro, layer = "batiments_sortie")
shp_bati_bma <- readOGR(dsn = directory_data_bma, layer = "bldg_bangkhuntien")
shp_bati_bma <- spTransform(shp_bati_bma, CRS=CRS(proj4string(shp_bati_gen)))
## 1. Définition des sous-zones
#Création de la grille
grid <- raster()
extent(grid) <- extent(men_zone_bgt)
proj4string(grid) <- proj4string(men_zone_bgt)
res(grid) <- RES_GRID
grid <- rasterToPolygons(grid)
plot(grid, add=TRUE)
## 2. Extraction des centroids et des données par cellule
centroid_bat_bma <- gCentroid(shp_bati_bma, byid=TRUE)
centroid_bat_gen <- gCentroid(shp_bati_gen, byid=TRUE)
plot(grid)
RES_GRID <- 300
grid <- raster()
extent(grid) <- extent(men_zone_bgt)
proj4string(grid) <- proj4string(men_zone_bgt)
res(grid) <- RES_GRID
grid <- rasterToPolygons(grid)
plot(grid, add=TRUE)
grid <- raster()
extent(grid) <- extent(men_zone_bgt)
proj4string(grid) <- proj4string(men_zone_bgt)
res(grid) <- RES_GRID
grid <- rasterToPolygons(grid)
plot(grid, add=TRUE)
grid <- raster()
extent(grid) <- extent(men_zone_bgt)
proj4string(grid) <- proj4string(men_zone_bgt)
res(grid) <- RES_GRID
grid <- rasterToPolygons(grid)
## 2. Extraction des centroids et des données par cellule
centroid_bat_bma <- gCentroid(shp_bati_bma, byid=TRUE)
centroid_bat_gen <- gCentroid(shp_bati_gen, byid=TRUE)
plot(grid)
length(grid)
bat_compa <- data.frame()
colnames(bat_compa) <- c('n_bat_bma', 'n_bat_gen', 'area_bat_bma', 'area_bat_gen')
for (i in 1:length(grid)) {
sous_zone <- grid[i,] # Sélection de la cellule
# Sélection des bâtiments par cellule de la grid
sous_zone_bat_bma <- gIntersection(shp_bati_bma, sous_zone, byid = TRUE)
sous_zone_bat_gen <- gIntersection(shp_bati_gen, sous_zone, byid = TRUE)
# Calcul du nb et de l'aire des batiments de chaque DB
n_bat_bma_sous_zone <- length(sous_zone_bat_bma)
n_bat_gen_sous_zone <- length(sous_zone_bat_gen)
area_bat_bma_sous_zone <- gArea(sous_zone_bat_bma)
area_bat_gen_sous_zone <- gArea(sous_zone_bat_gen)
# Inscription dans le tableau
bat_compa[i,1] <- n_bat_bma_sous_zone
bat_compa[i,2] <- n_bat_gen_sous_zone
bat_compa[i,3] <- area_bat_bma_sous_zone
bat_compa[i,4] <- area_bat_gen_sous_zone
plot(sous_zone_bat_gen, add = TRUE, col= 'red')
plot(sous_zone_bat_bma, add = TRUE, col='yellow')
}
colnames(bat_compa) <- c(n_bat_bma, n_bat_gen, area_bat_bma, area_bat_gen)
plot(n_bat_bma, _bat_gen)
plot(n_bat_bma~ n_bat_gen)
plot(n_bat_bma~n_bat_gen)
plot(n_bat_bma,n_bat_gen)
plot(bat_compa[,1], bat_compa[,2])
plot(bat_compa[,3], bat_compa[,4])
cor(bat_compa[,3], bat_compa[,4])
cor(bat_compa[,1], bat_compa[,2])
sum(bat_compa[,1])
sum(bat_compa[,2])
sum(bat_compa[,3])
sum(bat_compa[,4])
